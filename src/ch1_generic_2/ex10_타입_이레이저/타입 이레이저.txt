## 타입 이레이저

    - 제네릭은 자바 컴파일 단계에서만 사용된다.
    - 컴파일 이후에는 제네릭 정보가 삭제된다.
    - 컴파일이 된 .class 파일에는 타입 매개변수가 존재하지 않는다.

## 동작 방식 - 상한선이 없을 때

1) 제네릭 타입 선언
    public class GenericBox<T> {
        private T value;

        public void set(T value){
            this.value = value;
        }

        public T get() {
            return value;
        }
    }

2) 제네릭 타입에 Integer 타입 인자 전달
    void main() {
        GenericBox<Integer> box = new GenericBox<Integer>();
        box.set(10);
        Integer result = box.get();
    }

 @ 이렇게 하면 자바 컴파일러는 컴파일 시점에 타입 매개변수와 타입 인자를 포함한
   제네릭 정보를 활용해서 new GenericBox<Integer>() 에 대해 다음과 같이 이해한다.

3) 컴파일 시점

public class GenericBox<Integer> {

    private Integer value;

    public void set(Integer value) {
        this.value = value;
    }

    public Integer get(){
        return value;
    }

 }

4) 컴파일이 끝난 후
    - 상한 제한 없이 선언한 타입 매개변수 T는 Object 로 변환된다.

public class GenericBox {

    private Object value;

    public void set(Object value) {
        this.value = value;
    }

    public Object get() {
        return value;
    }
}

5) Main
    - 자바 컴파일러는 제네릭에서 타입 인자로 지정한 Integer로 캐스팅하는 코드를 추가해준다.
void main() {
    GenericBox box = new GenericBox();
    box.set(10);
    Integer result = (Integer) box.get(); // 컴파일러가 캐스팅 추가

}

## 동작 방식 - 상한선이 있을 때

@@ Object 를 최대 부모로 바꾼다.